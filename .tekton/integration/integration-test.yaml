kind: Pipeline
apiVersion: tekton.dev/v1beta1
metadata:
  name: integration-tests
spec:
  params:
    - description: 'Snapshot of the application'
      name: SNAPSHOT
      default: '{"components": [{"name":"test-app", "containerImage": "quay.io/example/repo:latest"}]}'
      type: string
    - description: 'Namespace where the application is running'
      name: NAMESPACE
      default: "default"
      type: string
  tasks:
    - name: provision-eaas-space
      taskRef:
        resolver: git
        params:
          - name: url
            value: https://github.com/konflux-ci/build-definitions.git
          - name: revision
            value: main
          - name: pathInRepo
            value: task/eaas-provision-space/0.1/eaas-provision-space.yaml
      params:
        - name: ownerName
          value: $(context.pipelineRun.name)
        - name: ownerUid
          value: $(context.pipelineRun.uid)
    - name: provision-cluster
      runAfter:
        - provision-eaas-space
      taskSpec:
        results:
          - name: clusterName
            value: "$(steps.create-cluster.results.clusterName)"
        steps:
          - name: get-supported-versions
            ref:
              resolver: git
              params:
                - name: url
                  value: https://github.com/konflux-ci/build-definitions.git
                - name: revision
                  value: main
                - name: pathInRepo
                  value: stepactions/eaas-get-supported-ephemeral-cluster-versions/0.1/eaas-get-supported-ephemeral-cluster-versions.yaml
            params:
              - name: eaasSpaceSecretRef
                value: $(tasks.provision-eaas-space.results.secretRef)
          - name: pick-version
            ref:
              resolver: git
              params:
                - name: url
                  value: https://github.com/konflux-ci/build-definitions.git
                - name: revision
                  value: main
                - name: pathInRepo
                  value: stepactions/eaas-get-latest-openshift-version-by-prefix/0.1/eaas-get-latest-openshift-version-by-prefix.yaml
            params:
              - name: prefix
                value: "$(steps.get-supported-versions.results.versions[0])."
          - name: create-cluster
            ref:
              resolver: git
              params:
                - name: url
                  value: https://github.com/konflux-ci/build-definitions.git
                - name: revision
                  value: main
                - name: pathInRepo
                  value: stepactions/eaas-create-ephemeral-cluster-hypershift-aws/0.1/eaas-create-ephemeral-cluster-hypershift-aws.yaml
            params:
              - name: instanceType
                value: m5.xlarge
              - name: eaasSpaceSecretRef
                value: $(tasks.provision-eaas-space.results.secretRef)
              - name: version
                value: "$(steps.pick-version.results.version)"
    - name: integration-tests
      runAfter:
        - provision-cluster
      description: runs the tests
      params:
        - name: SNAPSHOT
          value: $(params.SNAPSHOT)
      taskSpec:
        params:
        - name: SNAPSHOT
        volumes:
          - name: credentials
            emptyDir: {}
        results:
        - name: TEST_OUTPUT
          description: Test output
        steps:
        - name: get-kubeconfig
          ref:
            resolver: git
            params:
              - name: url
                value: https://github.com/konflux-ci/build-definitions.git
              - name: revision
                value: main
              - name: pathInRepo
                value: stepactions/eaas-get-ephemeral-cluster-credentials/0.1/eaas-get-ephemeral-cluster-credentials.yaml
          params:
            - name: eaasSpaceSecretRef
              value: $(tasks.provision-eaas-space.results.secretRef)
            - name: clusterName
              value: "$(tasks.provision-cluster.results.clusterName)"
            - name: credentials
              value: credentials
        - image: registry.redhat.io/openshift4/ose-cli:latest
          resources:
            requests:
              memory: 2Gi
            limits:
              memory: 2Gi
          env:
          - name: SNAPSHOT
            value: $(params.SNAPSHOT)
          - name: KUBECONFIG
            value: "/credentials/$(steps.get-kubeconfig.results.kubeconfig)"
          volumeMounts:
            - name: credentials
              mountPath: /credentials
          script: |
            dnf -y install jq git golang make
            echo ${SNAPSHOT} | jq .
            env

            OPERATOR_IMAGE=$(echo ${SNAPSHOT} | jq -r '.components[] | select(.name=="kueue-operator-main") | .containerImage')
            OPERAND_IMAGE=$(echo ${SNAPSHOT} | jq -r '.components[] | select(.name=="kueue-operand-main") | .containerImage')
            MUSTGATHER_IMAGE=$(echo ${SNAPSHOT} | jq -r '.components[] | select(.name=="kueue-must-gather-image") | .containerImage')
            SRC_REPO=$(echo ${SNAPSHOT} | jq -r '.components[] | select(.name=="kueue-operator-main") | .source.git.url')
            SRC_REVISION=$(echo ${SNAPSHOT} | jq -r '.components[] | select(.name=="kueue-operator-main") | .source.git.revision')
            SRC_BASEDIR=$(basename -s .git $SRC_REPO)
            NAMESPACE=openshift-kueue-operator

            OPERATOR_IMAGE_ORIGINAL=registry.redhat.io/kueue/kueue-rhel9-operator:latest
            OPERAND_IMAGE_ORIGINAL=registry.redhat.io/kueue/kueue-rhel9:latest
            MUSTGATHER_IMAGE_ORIGINAL=registry.redhat.io/kueue/kueue-must-gather-rhel9:latest

            echo "----------------------------"
            echo "Images to be tested:"
            echo "Kueue operator: ${OPERATOR_IMAGE}"
            echo "Kueue operand:  ${OPERAND_IMAGE}"
            echo "Kueue must-gather:  ${MUSTGATHER_IMAGE}"
            echo "----------------------------"

            git clone $SRC_REPO
            pushd $SRC_BASEDIR
            git checkout $SRC_REVISION
            make deploy-upstream-cert-manager

            TMPDIR=$(mktemp -d)
            cp -r deploy ${TMPDIR}
            pushd $TMPDIR

            sed -i "s|${OPERATOR_IMAGE_ORIGINAL}.*|${OPERATOR_IMAGE}|g" deploy/07_deployment.yaml
            sed -i "s|${OPERAND_IMAGE_ORIGINAL}.*|${OPERAND_IMAGE}|g" deploy/07_deployment.yaml
            if [ -n "${MUSTGATHER_IMAGE}" ]; then
              sed -i "s|${MUSTGATHER_IMAGE_ORIGINAL}.*|${MUSTGATHER_IMAGE}|g" deploy/07_deployment.yaml
            fi

            oc create ns ${NAMESPACE}
            oc apply -f deploy/
            oc apply -f deploy/crd
            popd

            # wait for operator
            timeout 300s bash -c 'until oc get deployment openshift-kueue-operator -n openshift-kueue-operator -o jsonpath="{.status.conditions[?(@.type==\"Available\")].status}" | grep -q "True"; do sleep 10; echo "Still waiting..."; done'

            if make e2e-ci-test; then
              RESULT="SUCCESS"
              TEST_EXIT_CODE=0
            else
              RESULT="FAILURE"
              TEST_EXIT_CODE=$?
            fi

            TESTS=$(grep "<testsuites" report.xml | sed -E 's/.*tests="([0-9]+)".*/\1/' | tr -d '\n')
            FAILURES=$(grep "<testsuites" report.xml | sed -E 's/.*failures="([0-9]+)".*/\1/' | tr -d '\n')
            SUCCESSES=$((TESTS-FAILURES))

            TIMESTAMP=$(date +%s)
            TEST_OUTPUT=$(jq -rc \
              --arg result "${RESULT}" \
              --arg timestamp "${TIMESTAMP}" \
              --arg failures "${FAILURES}" \
              --arg successes "${SUCCESSES}" \
              --null-input \
              '{result: $result, timestamp: $timestamp, successes: ($successes | tonumber), warnings: 0, failures: ($failures | tonumber)}')

            echo -n "${TEST_OUTPUT}" | tee $(results.TEST_OUTPUT.path)
            exit ${TEST_EXIT_CODE}
